//automatically adds profiles to parts
//you can manually add profiles by using
//	@PART[-PART-NAME-]:HAS[!LRTFCONF]:BEFORE[LRTFConfig]
//	{
//		lrtfConfName = Booster //or any other configs on this list.
//	}
//	Parts with existing TF profiles will be ignored when these are configured later.
// 


//First looks for solid fuel engines
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[SolidBooster]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	lrtfConfName = Solid
}

//Jet eninges
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[Turbine]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	lrtfConfName = Turbojet
}

//Nuclear engines
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[Nuclear]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	lrtfConfName = Nuclear
}

//Ion engines
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[Electric]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	lrtfConfName = Electric
}

//Monoprops
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[Monoprop]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	lrtfConfName = Monoprop	
}


//finally look for bi-propellant engines
//looks at total thrust, vacuum ISP and surface ISP to place into buckets.
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]]]:NEEDS[TestFlight]:FOR[LRTFConfig]
{
	//Gets basic isp numbers
	ispV = #$MODULE[ModuleEngines*]/atmosphereCurve/key,0$
	@ispV ^= : -.*::  //for toroidial engines
	@ispV ^= :. ::
	ispG = #$MODULE[ModuleEngines*]/atmosphereCurve/key,1$
	@ispG ^= : -.*::  //for toroidial engines
	@ispG ^= :. ::  
	
	ispD = #$ispV$
	@ispD -= #$ispG$
	
	//Gets max thrust
	maxT = #$MODULE[ModuleEngines*]/maxThrust$
}
//manuvering engines
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,#maxT[<25]]:FOR[LRTFConfig]
{
	lrtfConfName = Maneuvering
}
//vacuum optimized
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,#ispV[>320],#ispD[>70]]:FOR[LRTFConfig]
{
	lrtfConfName = Vacuum
}
//mixed use high efficiency
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,#ispV[>320]]:FOR[LRTFConfig]
{
	lrtfConfName = HighEfficiency	
}
//sustainer
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,#ispD[>45]]:FOR[LRTFConfig]
{
	lrtfConfName = Sustainer
}
//everything else is a booster
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,#ispD]:FOR[LRTFConfig]
{
	lrtfConfName = Booster
}

//cleanup
@PART[*]:HAS[#lrtfConfName]:FOR[LRTFConfig]
{
	-ispV = DEL
	-ispG = DEL
	-ispD = DEL
	-maxT = DEL	
}


//manned command modules
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleCommand],#CrewCapacity[>0]]:FOR[LRTFConfig]
{
	lrtfConfName = Manned
}
//unmanned command modules
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleCommand]]:FOR[LRTFConfig]
{
	lrtfConfName = Unmanned
}


//LiquidFuel+Oxidizer tanks
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer]]:FOR[LRTFConfig]
{
	lrtfConfName = Bipropellant
}

//Monoprop tanks
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@RESOURCE[MonoPropellant]]:FOR[LRTFConfig]
{
	lrtfConfName = Monopropellant
}

//deployable solar panels
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleDeployableSolarPanel]]:FOR[LRTFConfig]
{
	lrtfConfName = SolarPanel
}

//heatshields
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleAblator]]:FOR[LRTFConfig]
{
	lrtfConfName = HeatShield
}

//reaction wheels
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleReactionWheel]]:FOR[LRTFConfig]
{
	lrtfConfName = ReactionWheel
}

//wheels
@PART[*]:HAS[!LRTFCONF,~lrtfConfName,@MODULE[ModuleWheelBase]]:FOR[LRTFConfig]
{
	lrtfConfName = Wheel
}
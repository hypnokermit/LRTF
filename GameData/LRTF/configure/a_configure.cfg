// First add in common components
// To keep config clutter down, TF settings are abstracted into a common LRTFCONF[] block
// and a LRTFCONF[configName] block (e.g LRTFCONF[Avionics])
// Automated profiles are created in the GameData/LRTF/profiles section.

// Handle TF interop
@PART[*]:HAS[@LRTFCONF,@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
		!LRTFCONF,* {} // something else is configuring TF, so don't do it.
}

//Preprocess
@PART[*]:HAS[@LRTFCONF]:FOR[zTestFlight]
{
	// default values
	@LRTFCONF
	{
		alias = #$partName$
		displayName = #$../title$
		temp = #$../name$
		@temp ^= :_:-:
		mainConf = #kspPartName = $temp$:$alias$

		tech =
		additionalRecorders =
		
		kinkV = 0.75
		kinkH = 0.25
		kinkW = 0.5

		numThings = 1.0

		dataMult = 1.0
		qMult = 1.0
		startDU = 0
	}
	
	// Let user override defaults
	@LRTFCONF:HAS[#title[*]]
	{
		@displayName = #$title$
	}
	@LRTFCONF:HAS[#mainConfiguration[*]]
	{
		// Assume no alias in mainConfiguration; otherwise overwrite below
		@mainConf = #$mainConfiguration$:$alias$
	}
	@LRTFCONF:HAS[#mainConfiguration[*:*]]
	{
		@mainConf = #$mainConfiguration$
		@alias = #$mainConfiguration[1,:]$
	}

	@LRTFCONF:HAS[#additionalDataRecorders[*]]
	{
		@additionalRecorders = #$additionalDataRecorders$
	}

	@LRTFCONF:HAS[#reliabilityMidV[*]]
	{
		@kinkV = #$reliabilityMidV$
	}
	@LRTFCONF:HAS[#reliabilityMidTangentWeight[*]]
	{
		@kinkW = #$reliabilityMidTangentWeight$
	}
	@LRTFCONF:HAS[#reliabilityMidH[*]]
	{
		@kinkH = #$reliabilityMidH$
	}
	@LRTFCONF:HAS[#reliabilityDataRateMultiplier[*]]
	{
		@dataMult *= #$reliabilityDataRateMultiplier$
	}
	@LRTFCONF:HAS[#ignitionDynPresFailMultiplier[*]]
	{
		@qMult = #$ignitionDynPresFailMultiplier$
	}
	@LRTFCONF:HAS[#startFlightData[*]]
	{
		@startDU = #$startFlightData$
	}
	@LRTFCONF:HAS[#techTransfer[*]]
	{
		@tech = #$techTransfer$
	}
	@LRTFCONF:HAS[#clusterMultiplier[*]]
	{
		@numThings = #$clusterMultiplier$
	}
	@LRTFCONF:HAS[~explicitDataRate[?rue]]
	{
		@dataMult *= 800 // data collected per full burn
		@dataMult /= #$startMTBF$
	}
	
	// Correct statistics for clusters and convert fail chance to fail rate
	@LRTFCONF
	{
		@ignitionReliabilityStart != #$numThings$
		@ignitionReliabilityEnd != #$numThings$
		@cycleReliabilityStart != #$numThings$
		@cycleReliabilityEnd != #$numThings$

		@dataMult *= #$numThings$

		// should really be failChanceStart = -ln(cycleReliabilityStart)/startMTBF
		// but ModuleManager doesn't support natural logarithms
		// (1/cycleReliabilityStart-1)/(2*startMTBF) is an ok approximation
		failChanceStart = 1
		@failChanceStart /= #$cycleReliabilityStart$
		@failChanceStart -= 1
		@failChanceStart /= 2
		@failChanceStart /= #$startMTBF$
		failChanceEnd = 1
		@failChanceEnd /= #$cycleReliabilityEnd$
		@failChanceEnd -= 1
		@failChanceEnd /= 2
		@failChanceEnd /= #$startMTBF$
	}
}

//core setup.
@PART[*]:HAS[@LRTFCONF]:FOR[zTestFlight]
{
	@description = #$description$ <br><br><b><color=orange>Rated Run Time ~$LRTFCONF/startMTBF$</color><br><br>
		
	MODULE
	{
		name = TestFlightCore
		title = #$../LRTFCONF/displayName$
		configuration = #$../LRTFCONF/mainConf$
		!temp = DEL
		maxData = 10000
		techTransferMax = 3000
		startFlightData = #$../LRTFCONF/startDU$
		techTransfer = #$../LRTFCONF/tech$

		techTransferGenerationPenalty = 0.5

	}

	//recorder name will be changed later to correct name
	MODULE
	{
		name = LRTFDataRecorder
		configuration = #$../LRTFCONF/alias$
		flightDataMultiplier = #$../LRTFCONF/dataMult$
		
		additionalDataRecorders = #$../LRTFCONF/additionalRecorders$
	}

	MODULE
	{
		name = TestFlightReliability
		configuration = #$../LRTFCONF/alias$
		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../../LRTFCONF/failChanceStart$

			// Calculate kink time
			key20 = #$../../LRTFCONF/kinkH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../../LRTFCONF/failChanceEnd$
			@key21 -= #$../../LRTFCONF/failChanceStart$
			@key21 *= #$../../LRTFCONF/kinkV$
			@key21 += #$../../LRTFCONF/failChanceStart$

			// Calculate kink tangent
			key22 = #$../../LRTFCONF/failChanceEnd$
			@key22 -= #$../../LRTFCONF/failChanceStart$
			@key22 *= 0.0001
			@key22 *= #$../../LRTFCONF/kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../../LRTFCONF/failChanceEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../../LRTFCONF/kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = 10000
			key31 = #$../../LRTFCONF/failChanceEnd$
			key32 = 0 // flat intangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
			!key221 = DEL
			!key222 = DEL
		}
	}
}

// First add in common components
// To keep config clutter down, TF settings are abstracted into a common LRTFCONF[] block
// and a LRTFCONF[configName] block (e.g LRTFCONF[Avionics])
// Automated profiles are created in the GameData/LRTF/profiles section.

// Handle TF interop
@PART[*]:HAS[@LRTFCONF,@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
		!LRTFCONF,* {} // something else is configuring TF, so don't do it.
}

//Preprocess
@PART[*]:HAS[@LRTFCONF]:FOR[zTestFlight]
{
	// default values
	@LRTFCONF
	{
		alias = #$partName$
		displayName = #$../title$
		temp = #$../name$
		@temp ^= :_:-:
		mainConf = #kspPartName = $temp$:$alias$

		tech =
		additionalRecorders =
		
		kinkV = 0.75
		kinkH = 0.225
		kinkW = 0.5

		numThings = 1.0

		dataMult = 1.0
		qMult = 1.0
		startDU = 0
	}
	
	// Let user override defaults
	@LRTFCONF:HAS[#title[*]]
	{
		@displayName = #$title$
	}
	@LRTFCONF:HAS[#mainConfiguration[*]]
	{
		// Assume no alias in mainConfiguration; otherwise overwrite below
		@mainConf = #$mainConfiguration$:$alias$
	}
	@LRTFCONF:HAS[#mainConfiguration[*:*]]
	{
		@mainConf = #$mainConfiguration$
		@alias = #$mainConfiguration[1,:]$
	}

	@LRTFCONF:HAS[#additionalDataRecorders[*]]
	{
		@additionalRecorders = #$additionalDataRecorders$
	}

	@LRTFCONF:HAS[#reliabilityMidV[*]]
	{
		@kinkV = #$reliabilityMidV$
	}
	@LRTFCONF:HAS[#reliabilityMidTangentWeight[*]]
	{
		@kinkW = #$reliabilityMidTangentWeight$
	}
	@LRTFCONF:HAS[#reliabilityMidH[*]]
	{
		@kinkH = #$reliabilityMidH$
	}
	@LRTFCONF:HAS[#reliabilityDataRateMultiplier[*]]
	{
		@dataMult *= #$reliabilityDataRateMultiplier$
	}
	@LRTFCONF:HAS[#ignitionDynPresFailMultiplier[*]]
	{
		@qMult = #$ignitionDynPresFailMultiplier$
	}
	@LRTFCONF:HAS[#startFlightData[*]]
	{
		@startDU = #$startFlightData$
	}
	@LRTFCONF:HAS[#techTransfer[*]]
	{
		@tech = #$techTransfer$
	}
	@LRTFCONF:HAS[#clusterMultiplier[*]]
	{
		@numThings = #$clusterMultiplier$
	}
	@LRTFCONF:HAS[~explicitDataRate[?rue]]
	{
		@dataMult *= #$duPerFlight$ // data collected per full burn
		@dataMult /= #$MTBF$
	}
	
	// Correct statistics for clusters and convert fail chance to fail rate
	@LRTFCONF
	{
		@ignitionReliabilityStart != #$numThings$
		@ignitionReliabilityEnd != #$numThings$
		@cycleReliabilityStart != #$numThings$
		@cycleReliabilityEnd != #$numThings$

		@dataMult *= #$numThings$
	}
}

//core setup.
@PART[*]:HAS[@LRTFCONF]:FOR[zTestFlight]
{
	@description = #$description$ <br><br><b><color=orange>Rated Run Time ~$LRTFCONF/MTBF$</color><br><br>
		
	MODULE
	{
		name = TestFlightCore
		configVersion = 2
		CONFIG
		{
			title = #$../../LRTFCONF/displayName$
			configuration = #$../../LRTFCONF/mainConf$
			!temp = DEL
			maxData = #$../../LRTFCONF/maxData$
			techTransferMax = 3000
			startFlightData = #$../../LRTFCONF/startDU$
			techTransfer = #$../../LRTFCONF/tech$

			techTransferGenerationPenalty = 0.5
		}

	}

	//recorder name will be changed later to correct name
	MODULE
	{
		name = LRTFDataRecorder
		configVersion = 2
		CONFIG
		{
			configuration = #$../../LRTFCONF/alias$
			flightDataMultiplier = #$../../LRTFCONF/dataMult$
		}
		additionalDataRecorders = #$../LRTFCONF/additionalRecorders$
	}

	MODULE
	{
		name = LRTFReliability
		configuration = #$../LRTFCONF/alias$
		
		lrtfReliabilityCurve
		{
			MTBF = #$../../LRTFCONF/MTBF$
			maxData = #$../../LRTFCONF/maxData$
			cycleReliabilityStart = #$../../LRTFCONF/cycleReliabilityStart$
			cycleReliabilityEnd = #$../../LRTFCONF/cycleReliabilityEnd$
			kinkV = #$../../LRTFCONF/kinkV$
			kinkH= #$../../LRTFCONF/kinkH$
			kinkW = #$../../LRTFCONF/kinkW$
		}
	}
}

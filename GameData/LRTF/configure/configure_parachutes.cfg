// To keep config clutter down, TF settings are abstracted into a LRTFCHUTE block.
// The syntax is as follows:
// LRTFCHUTE {
//     // required
//     name =                           // configuration name. MUST be unique to each part!
//     cycleReliabilityStart =          // probability of surviving a 6-minute re-entry at 0 DU
//     cycleReliabilityEnd =            // probability at max DU
//	   startMTBF =                      // MTBF with 0 du
//     duPerFlight =                    // du per nominial flight
//
//     // optional
//     title =                          // part name to use in MFD. Defaults to full VAB name.
//     startFlightData =                // minimum DU a part may have. Default 0.
//     techTransfer =                   // other parts produce data for this one
//     reliabilityDataRateMultiplier =  // data collection efficiency (default 1.0)
//     explicitDataRate = True          // reliabilityDataRateMultiplier is data rate per second. Recommended for unusual re-entry profiles
//
//     mainConfiguration =              // override for configurable heat shields
//     reliabilityMidH =                // midpoint data value. 0.0 means 1000 DU, 1.0 means 6000 DU. Default 0.75 (4750 DU).
// }

@PART[*]:HAS[@LRTFCHUTE,@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
        !LRTFCHUTE,* {} // something else is configuring TF, so don't do it.
}

// Preprocess
@PART[*]:HAS[@LRTFCHUTE]:FOR[zTestFlight]
{
        // Default values
        @LRTFCHUTE,*
        {
                alias = #$name$
                displayName = #$../title$
                temp = #$../name$
                @temp ^= :_:-:
                mainConf = #kspPartName = $temp$:$alias$

                kinkH = 0.75

                dataMult = 1.0
                startDU = 0
                tech =  
                
        }

        // Let user override defaults
        @LRTFCHUTE,*:HAS[#title[*]]
        {
                @displayName = #$title$
        }
        @LRTFCHUTE,*:HAS[#mainConfiguration[*]]
        {
                // Assume no alias in mainConfiguration; otherwise overwrite below
                @mainConf = #$mainConfiguration$:$alias$
        }
        @LRTFCHUTE,*:HAS[#mainConfiguration[*:*]]
        {
                @mainConf = #$mainConfiguration$
                @alias = #$mainConfiguration[1,:]$
        }
        @LRTFCHUTE,*:HAS[#reliabilityMidH[*]]
        {
                @kinkH = #$reliabilityMidH$
        }
        @LRTFCHUTE,*:HAS[#reliabilityDataRateMultiplier[*]]
        {
                @dataMult *= #$reliabilityDataRateMultiplier$
        }
        @LRTFCHUTE,*:HAS[#startFlightData[*]]
        {
                @startDU = #$startFlightData$
        }
        @LRTFCHUTE,*:HAS[#techTransfer[*]]
        {
                @tech = #$techTransfer$
        }
        @LRTFCHUTE,*:HAS[~min]
        {
                min = 0.1
        }
        @LRTFCHUTE,*:HAS[~resource]
        {
                resource =
        }       
        @LRTFCHUTE,*:HAS[~explicitDataRate[?rue]]
        {
                @dataMult *= #$duPerFlight$ 
                @dataMult /= #$startMTBF$ 
        }

        // Convert fail chance to fail rate
        @LRTFCHUTE,*
        {
                // should really be failChanceStart = -ln(cycleReliabilityStart)/#$startMTBF$
                // but ModuleManager doesn't support natural logarithms
                // (1/cycleReliabilityStart-1)/(2*#$startMTBF$) is an ok approximation
                failChanceStart = 1
                @failChanceStart /= #$cycleReliabilityStart$
                @failChanceStart -= 1
                @failChanceStart /= 2
                @failChanceStart /= #$startMTBF$
                failChanceEnd = 1
                @failChanceEnd /= #$cycleReliabilityEnd$
                @failChanceEnd -= 1
                @failChanceEnd /= 2
                @failChanceEnd /= #$startMTBF$
        }
}

//------------------------------------------------------------------
// Create the nodes.

@PART[*]:HAS[@LRTFCHUTE]:FOR[zTestFlight]
{
		@description = #$description$ <br><br><b><color=orange>Rated Operational Time ~$LRTFCHUTE/startMTBF$ seconds</color><br><br>

        MODULE
        {
                name = TestFlightCore
                title = #$../LRTFCHUTE,0/displayName$
                configuration = #$../LRTFCHUTE,0/mainConf$
                maxData = 10000

                startFlightData = #$../LRTFCHUTE,0/startDU$
                techTransfer = #$../LRTFCHUTE,0/tech$
                // Most part series have only 2-3 parts
                techTransferGenerationPenalty = 0.5

                // R&D parameters will be handled later
        }

        MODULE
        {
                name = LRTFDataRecorder_Parachutes
                configuration = #$../LRTFCHUTE,0/alias$
                flightDataMultiplier = #$../LRTFCHUTE,0/dataMult$
        }

        MODULE
        {
                name = TestFlightReliability
                configuration = #$../LRTFCHUTE,0/alias$
                reliabilityCurve
                {
                        // Create first key
                        key10 = 0
                        key11 = #$../../LRTFCHUTE,0/failChanceStart$

                        // Calculate kink time
                        key20 = #$../../LRTFCHUTE,0/kinkH$
                        @key20 *= 5000
                        @key20 += 1000

                        // Calculate kink value
                        key21 = #$../../LRTFCHUTE,0/failChanceEnd$
                        @key21 -= #$../../LRTFCHUTE,0/failChanceStart$
                        @key21 *= 0.75
                        @key21 += #$../../LRTFCHUTE,0/failChanceStart$

                        // Calculate kink tangent
                        key22 = #$../../LRTFCHUTE,0/failChanceEnd$
                        @key22 -= #$../../LRTFCHUTE,0/failChanceStart$
                        @key22 *= 0.0001
                        @key22 *= 0.5
                        // now average it with the linear tangent to the endpoint
                        key221 = #$../../LRTFCHUTE,0/failChanceEnd$
                        @key221 -= #$key21$
                        key222 = 10000
                        @key222 -= #$key20$
                        @key221 /= #$key222$
                        @key222 = 0.5
                        @key222 *= -1
                        @key222 += 1
                        @key221 *= #$key222$
                        @key22 += #$key221$

                        // Create end key
                        key30 = 10000
                        key31 = #$../../LRTFCHUTE,0/failChanceEnd$
                        key32 = 0 // flat intangent

                        // Create the keys
                        key = #$key10$ $key11$
                        key = #$key20$ $key21$ $key22$ $key22$
                        key = #$key30$ $key31$ $key32$ $key32$

                        // Clean up
                        !key10 = DEL
                        !key11 = DEL
                        !key20 = DEL
                        !key21 = DEL
                        !key22 = DEL
                        !key30 = DEL
                        !key31 = DEL
                        !key32 = DEL
                        !key221 = DEL
                        !key222 = DEL
                }
        }
}

@PART[*]:HAS[@LRTFCHUTE]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_ParachuPartial
                configuration = #$../LRTFCHUTE,0/alias$
                duFail = 250
                duRepair = 250
                failureTitle = Reefing Failure
                severity = major
                weight = 32
				failureType = hardware
        }        
        MODULE
        {
                name = LRTFFailure_ParachuteFail
                configuration = #$../LRTFCHUTE,0/alias$
                duFail = 250
                duRepair = 250
                failureTitle = Parachute Failure
                severity = major
                weight = 4
                failureType = hardware
        }
}

//Cleanup
@PART[*]:HAS[@LRTFCHUTE]:AFTER[zTestFlight]
{
	-LRTFCHUTE {}
}
@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{
	@LRTFCONF[Engine]:HAS[~engines]
	{
		engines = all
	}
	@LRTFCONF[Engine]:HAS[~additionalIgnitionFailChance]
	{
		additionalIgnitionFailChance = 0.01
	}

}


//------------------------------------------------------------------
// Nodes for first (usually only) engine.  Treats all engines on a part as a single item

@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{

	@MODULE[LRTFDataRecorder]
	{
		%name = LRTFDataRecorder_Engine
		engineID = #$../LRTFCONF[Engine]/engines$
	}

	MODULE
	{
		name = TestFlightReliability_EngineCycle
		configuration = #$../LRTFCONF[Engine]/alias$
		engineID = #$../LRTFCONF[Engine]/engines$
		ratedBurnTime = #$../LRTFCONF[Engine]/MTBF$
		idleDecayRate = 0.1
		cycle
		{
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0
			btPlus = #$../../LRTFCONF[Engine]/MTBF$
			@btPlus += 5 // cushion
			bt15 = #$../../LRTFCONF[Engine]/MTBF$
			@bt15 *= 1.5
			@bt15 += 5
			key = #$btPlus$ 1 0 0
			key = #$bt15$ 100 0 0
			!btPlus = DEL
			!bt15 = DEL
		}
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#maxAirTemp[*]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightReliability_SkinTemperature
		configuration = #$../LRTFCONF[Engine]/alias$
		temperatureCurve
		{
			key = 0.00 1.00 0 0
			tempDiff = #$../../maxTemp$
			@tempDiff -= #$../../LRTFCONF[Engine]/maxAirTemp$
			tempBase = #$../../maxTemp$
			@tempBase -= #$tempDiff$
			@tempBase -= #$tempDiff$
			key = #$tempBase$ 1.0 0 0
			tempMid = #$../../LRTFCONF[Engine]/maxAirTemp$
			slopeMid = 20.0
			@slopeMid /= #$tempDiff$
			key = #$tempMid$ 10.0 $slopeMid$ $slopeMid$
			key = #$../../maxTemp$ 100.0
			!tempBase = DEL
			!tempDiff = DEL
			!tempMid = DEL
			!slopeMid = DEL
		}
	}
}
@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#maxMach[*]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightReliability_DynamicPressure
		configuration = #$../LRTFCONF[Engine]/alias$
		temperatureCurve
		{
			// Normalize to flight at 5 km
			maxPressure = 75530.658
			v2 = #$../../LRTFCONF[Engine]/maxMach$
			@v2 != 2
			@maxPressure *= #$v2$

			key = 0.00 1.00 0 0
			key = #$maxPressure$ 1.00 0 0
			p15 = #$maxPressure$
			@p15 *= 1.5
			key = #$p15$ 100.0
			!maxPressure = DEL
			!v2 = DEL
			!p15 = DEL
		}
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#solidFuelFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Thrust Instability
		severity = minor
		weight = 32
		failureType = mechanical
		ispMultiplier = 0.7
		ispMultiplierJitter = 0.4
	}
	MODULE
	{
		name = LRTFFailure_Explode
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 400
		failureTitle = Explosion!
		severity = major
		weight = 2
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#liquidFuelFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 32
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 16
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
	MODULE
	{
		name = LRTFFailure_EngineCoolant
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 150
		duRepair = 200
		failureTitle = Overheating
		severity = minor
		weight = 4
		failureType = mechanical
	}
	MODULE
	{
		name = LRTFFailure_Explode
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 400
		failureTitle = Explosion!
		severity = major
		weight = 2
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electrostaticFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 16
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 32
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electromagneticFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 16
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 16
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
	MODULE
	{
		name = LRTFFailure_EngineCoolant
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 150
		duRepair = 200
		failureTitle = Overheating
		severity = minor
		weight = 4
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#turbineFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 32
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 16
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
	MODULE
	{
		name = LRTFFailure_EngineCoolant
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 150
		duRepair = 200
		failureTitle = Overheating
		severity = minor
		weight = 2
		failureType = mechanical
	}
	MODULE
	{
		name = LRTFFailure_Explode
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 400
		failureTitle = Explosion!
		severity = major
		weight = 2
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electricFanFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 32
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 2
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
	MODULE
	{
		name = LRTFFailure_Explode
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 400
		failureTitle = Explosion!
		severity = major
		weight = 2
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#ramjetFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 32
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 16
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#turboRamjetFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_EngineShutdown
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Engine Shutdown
		severity = major
		weight = 32
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_EnginePerformanceLoss
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Performance Loss
		severity = minor
		weight = 16
		failureType = mechanical
		ispMultiplier = 0.5
		ispMultiplierJitter = 0.1
	}
	MODULE
	{
		name = LRTFFailure_Explode
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 400
		failureTitle = Explosion!
		severity = major
		weight = 2
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#ignitionFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_IgnitionFail
		engineID = #$../LRTFCONF[Engine]/engines$
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 300
		additionalFailureChance = #$../LRTFCONF[Engine]/additionalIgnitionFailChance$
		failureTitle = Failed to ignite
		severity = major
		failureType = mechanical
		
		baseIgnitionChance
		{
			// Create first key
			key10 = 0
			key11 = #$../../LRTFCONF[Engine]/ignitionReliabilityStart$

			// Calculate kink time
			key20 = #$../../LRTFCONF[Engine]/kinkH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
			@key21 -= #$../../LRTFCONF[Engine]/ignitionReliabilityStart$
			@key21 *= #$../../LRTFCONF[Engine]/kinkV$
			@key21 += #$../../LRTFCONF[Engine]/ignitionReliabilityStart$

			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
			@key22 -= #$../../LRTFCONF[Engine]/ignitionReliabilityStart$
			@key22 *= 0.0001
			@key22 *= #$../../LRTFCONF[Engine]/kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
			@key221 -= #$key21$
			key222 = #$../../LRTFCONF/maxData$
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../../LRTFCONF[Engine]/kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = #$../../LRTFCONF/maxData$
			key31 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
			key32 = 0 // flat intangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key221 = DEL
			!key222 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
		
@PART[*]:HAS[@MODULE[LRTFFailure_IgnitionFail]:HAS[#pressureFailures[?rue]]]:FOR[zTestFlight]
{
	@MODULE[LRTFFailure_IgnitionFail]
	{	
		pressureCurve
		{
			key = 0 1 0 0
			key = 5000 1 0 0
			key = 15000 0.85 -2.25E-05 -2.25E-05
			key = 30000 0.4
			key = 50000 0.15 0 0
			@key,*[0, ] *= #$../../LRTFCONF[Engine]/qMult$
		}
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#gimbalFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_LockGimbal
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 50
		failureTitle = Vectoring Disabled
		severity = minor
		weight = 16
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_GimbalCenter
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 150
		duRepair = 200
		failureTitle = Vectoring Glitch
		severity = minor
		weight = 4
		failureType = software
	}
	MODULE
	{
		name = LRTFFailure_GimbalSpeed
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Sluggish Vectoring
		severity = minor
		weight = 8
		failureType = mechanical
	}
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#resourceFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_ResourceLeak
		configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Resource Leak
		severity = minor
		weight = 32
		initialAmount = #$../LRTFCONF[Engine]/initialAmount$
		perSecondAmount = #$../LRTFCONF[Engine]/perSecondAmount$
		failureType = hardware
		resourceBlacklist = #$../LRTFCONF[Engine]/blacklist$
		RESOURCETITLES
		{
			ElectricCharge = Short Circuit
		}
	}
	MODULE
	{
        name = LRTFFailure_ResourcePump
        configuration = #$../LRTFCONF[Engine]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Pressurization Failure
        weight = 8
        severity = major
        failureType = hardware
        resourceBlacklist = #$../LRTFCONF[Engine]/blacklist$
        RESOURCETITLES
		{
			ElectricCharge = Battery Failure
		}
	}
}

//------------------------------------------------------------------
// General cleanup

@PART[*]:HAS[@MODULE[LRTFFailure*]:HAS[#engineID[]]]:AFTER[zTestFlight]
{
	@MODULE[LRTFFailure*]:HAS[#engineID[]]
	{
		@engineID = all
	}
}

// No decay for single-use engines. Doesn't really matter, but makes for less confusing UI
@PART[*]:HAS[@MODULE[TestFlightReliability_EngineCycle],@MODULE[ModuleEngines*]:HAS[#allowShutdown[?alse]]]:AFTER[zTestFlight]
{
	@MODULE[TestFlightReliability_EngineCycle]
	{
		!idleDecayRate = DEL
	}
}

//Cleanup
@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{
     !LRTFCONF[Engine] {} 
}

// To keep config clutter down, TF settings are abstracted into a LRTFCONF[Engine] block.
// The syntax is as follows:
// LRTFCONF[Engine] {
//     // required
//     name =                           // configuration name. MUST be unique to each part!
//     ratedBurnTime =                  // seconds engine can run continuously
//     cycleReliabilityStart =          // chance of running for RBT without failing at 0 DU
//     cycleReliabilityEnd =            // chance of running for RBT at max DU
//
//     // failure modes
//     // ignitionFailures can be combined with any mode, rest are mutually exclusive
//     solidFuelFailures = True         // solid-fuel rockets
//     liquidFuelFailures = True        // bipropellant, monopropellant, or thermal rockets
//     electrostaticFailures = True     // electrostatic ion engines
//     electromagneticFailures = True   // electromagnetic ion engines
//     turbineFailures = True           // turbofan or turbojet engines
//     electricFanFailures = True	// pure electric engines
//     ramjetFailures = True            // pure ramjets with no moving parts
//     turboRamjetFailures = True       // turboramjets
//     ignitionFailures = True          // engine can fail to ignite
//
//     // Required by ignitionFailures
//     ignitionReliabilityStart =       // chance of ignition at 0 DU
//     ignitionReliabilityEnd =         // chance of ignition at max DU
//
//     // optional
//     title =                          // part name to use in MFD. Defaults to full VAB name.
//     startFlightData =                // minimum DU a part may have. Default 0.
//     techTransfer =                   // other parts produce data for this one
//     reliabilityDataRateMultiplier =  // data collection efficiency (default 1.0)
//     explicitDataRate = True          // reliabilityDataRateMultiplier is data rate per second. Recommended for long-burning engines
//
//     engineID =                       // for multi-mode engines, which mode this block is for
//     clusterMultiplier =              // number of engines in this part (default 1)
//     ignitionDynPresFailMultiplier =  // scales the dynamic pressure at which the igniter starts to fail. By default reliability starts to drop at 5 kPa (90 m/s at Kerbin sea level), and falls below half the nominal value at 27 kPa (210 m/s).
//     additionalIgnitionFailChance =   // chance of ignition failure triggering other failure (default 0.2)
//
//     maxMach =                        // Mach number at which engine performance degrades. Emulated using dynamic pressure for now.
//     maxAirTemp =                     // intake temperature at which engine performance degrades. Assumed to equal skin temperature.
//
//     mainConfiguration =              // override for configurable engines
//     reliabilityMidH =                // midpoint data value. 0.0 means 1000 DU, 1.0 means 6000 DU. Default 0.25 (2250 DU).
//     reliabilityMidV =                // fraction of total reliability progress made at midH. Default 0.75.
//     reliabilityMidTangentWeight =    // smoothness of the reliability curve. Default 0.5.
//
//     resourceFailures = False          // adds resource failures to all valid resources.  See configure_tanks for switches
//     
// }


// Handle TF interop
@PART[*]:HAS[@LRTFCONF[Engine],@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
        !LRTFCONF[Engine] {} // something else is configuring TF, so don't do it.
}

// Preprocess
@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{
        // Default values
        @LRTFCONF[Engine]
        {
                alias = #$partName$
                displayName = #$../title$
                engines =
                temp = #$../name$
                @temp ^= :_:-:
                mainConf = #kspPartName = $temp$:$alias$

                kinkV = 0.75
                kinkH = 0.25
                kinkW = 0.5

                numThings = 1.0

                dataMult = 1.0
                qMult = 1.0
                startDU = 0
                tech =  
                additionalIgnitionFailChance = 0.2
        }

        // Let user override defaults
        @LRTFCONF[Engine]:HAS[#title[*]]
        {
                @displayName = #$title$
        }
        @LRTFCONF[Engine]:HAS[#mainConfiguration[*]]
        {
                // Assume no alias in mainConfiguration; otherwise overwrite below
                @mainConf = #$mainConfiguration$:$alias$
        }
        @LRTFCONF[Engine]:HAS[#mainConfiguration[*:*]]
        {
                @mainConf = #$mainConfiguration$
                @alias = #$mainConfiguration[1,:]$
        }
        @LRTFCONF[Engine]:HAS[#engineID[*]]
        {
                @engines = #$engineID$
        }
        @LRTFCONF[Engine]:HAS[#reliabilityMidV[*]]
        {
                @kinkV = #$reliabilityMidV$
        }
        @LRTFCONF[Engine]:HAS[#reliabilityMidTangentWeight[*]]
        {
                @kinkW = #$reliabilityMidTangentWeight$
        }
        @LRTFCONF[Engine]:HAS[#reliabilityMidH[*]]
        {
                @kinkH = #$reliabilityMidH$
        }
        @LRTFCONF[Engine]:HAS[#reliabilityDataRateMultiplier[*]]
        {
                @dataMult *= #$reliabilityDataRateMultiplier$
        }
        @LRTFCONF[Engine]:HAS[#ignitionDynPresFailMultiplier[*]]
        {
                @qMult = #$ignitionDynPresFailMultiplier$
        }
        @LRTFCONF[Engine]:HAS[#startFlightData[*]]
        {
                @startDU = #$startFlightData$
        }
        @LRTFCONF[Engine]:HAS[#techTransfer[*]]
        {
                @tech = #$techTransfer$
        }
        @LRTFCONF[Engine]:HAS[#clusterMultiplier[*]]
        {
                @numThings = #$clusterMultiplier$
        }
        @LRTFCONF[Engine]:HAS[~explicitDataRate[?rue]]
        {
                @dataMult *= 800 // data collected per full burn
                @dataMult /= #$ratedBurnTime$
        }
        @LRTFCONF[Engine]:HAS[#additionalIgnitionFailureChance[*]]
        {
                @additionalIgnitionFailChance = #$additionalIgnitionFailureChance$
        }

        // Correct statistics for engine clusters and convert fail chance to fail rate
        @LRTFCONF[Engine]
        {
                @ignitionReliabilityStart != #$numThings$
                @ignitionReliabilityEnd != #$numThings$
                @cycleReliabilityStart != #$numThings$
                @cycleReliabilityEnd != #$numThings$

                @dataMult *= #$numThings$

                // should really be failChanceStart = -ln(cycleReliabilityStart)/ratedBurnTime
                // but ModuleManager doesn't support natural logarithms
                // (1/cycleReliabilityStart-1)/(2*ratedBurnTime) is an ok approximation
                failChanceStart = 1
                @failChanceStart /= #$cycleReliabilityStart$
                @failChanceStart -= 1
                @failChanceStart /= 2
                @failChanceStart /= #$ratedBurnTime$
                failChanceEnd = 1
                @failChanceEnd /= #$cycleReliabilityEnd$
                @failChanceEnd -= 1
                @failChanceEnd /= 2
                @failChanceEnd /= #$ratedBurnTime$
        }
}

//------------------------------------------------------------------
// Nodes for first (usually only) engine.  Treats all engines on a part as a single item

@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{
		@description = #$description$ <br><br><b><color=orange>Rated Burn Time ~$LRTFCONF[Engine]/ratedBurnTime$</color><br><br>
		
        MODULE
        {
                name = TestFlightCore
                title = #$../LRTFCONF[Engine]/displayName$
                configuration = #$../LRTFCONF[Engine]/mainConf$
                !temp = DEL
                maxData = 10000

                startFlightData = #$../LRTFCONF[Engine]/startDU$
                techTransfer = #$../LRTFCONF[Engine]/tech$
                // Most engine series have only 2-3 parts
                techTransferGenerationPenalty = 0.5

                // R&D parameters will be handled later
        }

        MODULE
        {
                name = LRTFDataRecorder_Engine
                configuration = #$../LRTFCONF[Engine]/alias$
                engineID = #$../LRTFCONF[Engine]/engines$
                flightDataMultiplier = #$../LRTFCONF[Engine]/dataMult$
        }

        MODULE
        {
                name = TestFlightReliability
                configuration = #$../LRTFCONF[Engine]/alias$
                reliabilityCurve
                {
                        // Create first key
                        key10 = 0
                        key11 = #$../../LRTFCONF[Engine]/failChanceStart$

                        // Calculate kink time
                        key20 = #$../../LRTFCONF[Engine]/kinkH$
                        @key20 *= 5000
                        @key20 += 1000

                        // Calculate kink value
                        key21 = #$../../LRTFCONF[Engine]/failChanceEnd$
                        @key21 -= #$../../LRTFCONF[Engine]/failChanceStart$
                        @key21 *= #$../../LRTFCONF[Engine]/kinkV$
                        @key21 += #$../../LRTFCONF[Engine]/failChanceStart$

                        // Calculate kink tangent
                        key22 = #$../../LRTFCONF[Engine]/failChanceEnd$
                        @key22 -= #$../../LRTFCONF[Engine]/failChanceStart$
                        @key22 *= 0.0001
                        @key22 *= #$../../LRTFCONF[Engine]/kinkW$
                        // now average it with the linear tangent to the endpoint
                        key221 = #$../../LRTFCONF[Engine]/failChanceEnd$
                        @key221 -= #$key21$
                        key222 = 10000
                        @key222 -= #$key20$
                        @key221 /= #$key222$
                        @key222 = #$../../LRTFCONF[Engine]/kinkW$
                        @key222 *= -1
                        @key222 += 1
                        @key221 *= #$key222$
                        @key22 += #$key221$

                        // Create end key
                        key30 = 10000
                        key31 = #$../../LRTFCONF[Engine]/failChanceEnd$
                        key32 = 0 // flat intangent

                        // Create the keys
                        key = #$key10$ $key11$
                        key = #$key20$ $key21$ $key22$ $key22$
                        key = #$key30$ $key31$ $key32$ $key32$

                        // Clean up
                        !key10 = DEL
                        !key11 = DEL
                        !key20 = DEL
                        !key21 = DEL
                        !key22 = DEL
                        !key30 = DEL
                        !key31 = DEL
                        !key32 = DEL
                        !key221 = DEL
                        !key222 = DEL
                }
        }
        MODULE
        {
                name = TestFlightReliability_EngineCycle
                configuration = #$../LRTFCONF[Engine]/alias$
                engineID = #$../LRTFCONF[Engine]/engines$
                ratedBurnTime = #$../LRTFCONF[Engine]/ratedBurnTime$
                idleDecayRate = 0.1
                cycle
                {
                        key = 0.00 10.00
                        key = 5.00 1.00 -0.8 0
                        btPlus = #$../../LRTFCONF[Engine]/ratedBurnTime$
                        @btPlus += 5 // cushion
                        bt15 = #$../../LRTFCONF[Engine]/ratedBurnTime$
                        @bt15 *= 1.5
                        @bt15 += 5
                        key = #$btPlus$ 1 0 0
                        key = #$bt15$ 100 0 0
                        !btPlus = DEL
                        !bt15 = DEL
                }
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#maxAirTemp[*]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = TestFlightReliability_SkinTemperature
                configuration = #$../LRTFCONF[Engine]/alias$
                temperatureCurve
                {
                        key = 0.00 1.00 0 0
                        tempDiff = #$../../maxTemp$
                        @tempDiff -= #$../../LRTFCONF[Engine]/maxAirTemp$
                        tempBase = #$../../maxTemp$
                        @tempBase -= #$tempDiff$
                        @tempBase -= #$tempDiff$
                        key = #$tempBase$ 1.0 0 0
                        tempMid = #$../../LRTFCONF[Engine]/maxAirTemp$
                        slopeMid = 20.0
                        @slopeMid /= #$tempDiff$
                        key = #$tempMid$ 10.0 $slopeMid$ $slopeMid$
                        key = #$../../maxTemp$ 100.0
                        !tempBase = DEL
                        !tempDiff = DEL
                        !tempMid = DEL
                        !slopeMid = DEL
                }
        }
}
@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#maxMach[*]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = TestFlightReliability_DynamicPressure
                configuration = #$../LRTFCONF[Engine]/alias$
                temperatureCurve
                {
                        // Normalize to flight at 5 km
                        maxPressure = 75530.658
                        v2 = #$../../LRTFCONF[Engine]/maxMach$
                        @v2 != 2
                        @maxPressure *= #$v2$

                        key = 0.00 1.00 0 0
                        key = #$maxPressure$ 1.00 0 0
                        p15 = #$maxPressure$
                        @p15 *= 1.5
                        key = #$p15$ 100.0
                        !maxPressure = DEL
                        !v2 = DEL
                        !p15 = DEL
                }
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#solidFuelFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Thrust Instability
                severity = minor
                weight = 32
                failureType = mechanical
                ispMultiplier = 0.7
                ispMultiplierJitter = 0.4
        }
        MODULE
        {
                name = LRTFFailure_Explode
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 400
                failureTitle = Explosion!
                severity = major
                weight = 2
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#liquidFuelFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 32
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 16
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
        MODULE
        {
                name = LRTFFailure_EngineCoolant
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 150
                duRepair = 200
                failureTitle = Overheating
                severity = minor
                weight = 4
                failureType = mechanical
        }
        MODULE
        {
                name = LRTFFailure_Explode
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 400
                failureTitle = Explosion!
                severity = major
                weight = 2
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electrostaticFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 16
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 32
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electromagneticFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 16
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 16
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
        MODULE
        {
                name = LRTFFailure_EngineCoolant
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 150
                duRepair = 200
                failureTitle = Overheating
                severity = minor
                weight = 4
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#turbineFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 32
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 16
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
        MODULE
        {
                name = LRTFFailure_EngineCoolant
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 150
                duRepair = 200
                failureTitle = Overheating
                severity = minor
                weight = 2
                failureType = mechanical
        }
        MODULE
        {
                name = LRTFFailure_Explode
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 400
                failureTitle = Explosion!
                severity = major
                weight = 2
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#electricFanFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 32
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 2
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
        MODULE
        {
                name = LRTFFailure_Explode
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 400
                failureTitle = Explosion!
                severity = major
                weight = 2
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#ramjetFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 32
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 16
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#turboRamjetFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_EngineShutdown
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Engine Shutdown
                severity = major
                weight = 32
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_EnginePerformanceLoss
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Performance Loss
                severity = minor
                weight = 16
                failureType = mechanical
                ispMultiplier = 0.5
                ispMultiplierJitter = 0.1
        }
        MODULE
        {
                name = LRTFFailure_Explode
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 400
                failureTitle = Explosion!
                severity = major
                weight = 2
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#ignitionFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_IgnitionFail
                engineID = #$../LRTFCONF[Engine]/engines$
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 300
                failureTitle = Failed to ignite
                severity = major
                failureType = mechanical
                
                baseIgnitionChance
                {
                        // Create first key
                        key10 = 0
                        key11 = #$../../LRTFCONF[Engine]/ignitionReliabilityStart$

                        // Calculate kink time
                        key20 = #$../../LRTFCONF[Engine]/kinkH$
                        @key20 *= 5000
                        @key20 += 1000

                        // Calculate kink value
                        key21 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
                        @key21 -= #$../../LRTFCONF[Engine]/ignitionReliabilityStart$
                        @key21 *= #$../../LRTFCONF[Engine]/kinkV$
                        @key21 += #$../../LRTFCONF[Engine]/ignitionReliabilityStart$

                        // Calculate kink tangent
                        // tangent = Y/X
                        key22 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
                        @key22 -= #$../../LRTFCONF[Engine]/ignitionReliabilityStart$
                        @key22 *= 0.0001
                        @key22 *= #$../../LRTFCONF[Engine]/kinkW$
                        // now average it with the linear tangent to the endpoint
                        key221 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
                        @key221 -= #$key21$
                        key222 = 10000
                        @key222 -= #$key20$
                        @key221 /= #$key222$
                        @key222 = #$../../LRTFCONF[Engine]/kinkW$
                        @key222 *= -1
                        @key222 += 1
                        @key221 *= #$key222$
                        @key22 += #$key221$

                        // Create end key
                        key30 = 10000
                        key31 = #$../../LRTFCONF[Engine]/ignitionReliabilityEnd$
                        key32 = 0 // flat intangent

                        // Create the keys
                        key = #$key10$ $key11$
                        key = #$key20$ $key21$ $key22$ $key22$
                        key = #$key30$ $key31$ $key32$ $key32$

                        // Clean up
                        !key10 = DEL
                        !key11 = DEL
                        !key20 = DEL
                        !key21 = DEL
                        !key22 = DEL
                        !key221 = DEL
                        !key222 = DEL
                        !key30 = DEL
                        !key31 = DEL
                        !key32 = DEL
                }
                pressureCurve
                {
                        key = 0 1 0 0
                        key = 5000 1 0 0
                        key = 15000 0.85 -2.25E-05 -2.25E-05
                        key = 30000 0.4
                        key = 50000 0.15 0 0
                        @key,*[0, ] *= #$../../LRTFCONF[Engine]/qMult$
                }
                additionalFailureChance = #$../LRTFCONF[Engine]/additionalIgnitionFailChance$
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#gimbalFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_LockGimbal
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 50
                failureTitle = Vectoring Disabled
                severity = minor
                weight = 16
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_GimbalCenter
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 150
                duRepair = 200
                failureTitle = Vectoring Glitch
                severity = minor
                weight = 4
                failureType = software
        }
        MODULE
        {
                name = LRTFFailure_GimbalSpeed
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Sluggish Vectoring
                severity = minor
                weight = 8
                failureType = mechanical
        }
}

@PART[*]:HAS[@LRTFCONF[Engine]:HAS[#resourceFailures[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_ResourceLeak
                configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Resource Leak
                severity = minor
                weight = 32
                initialAmount = #$../LRTFCONF[Engine]/initialAmount$
                perSecondAmount = #$../LRTFCONF[Engine]/perSecondAmount$
                failureType = hardware
                resourceBlacklist = #$../LRTFCONF[Engine]/blacklist$
                RESOURCETITLES
                {
                	ElectricCharge = Short Circuit
                }
        }
        MODULE
        {
        		name = LRTFFailure_ResourcePump
				configuration = #$../LRTFCONF[Engine]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Pressurization Failure
				weight = 8
				severity = major
				failureType = hardware
				resourceBlacklist = #$../LRTFCONF[Engine]/blacklist$
				RESOURCETITLES
                {
                	ElectricCharge = Battery Failure
                }
        }
}

//------------------------------------------------------------------
// General cleanup

@PART[*]:HAS[@MODULE[LRTFFailure*]:HAS[#engineID[]]]:AFTER[zTestFlight]
{
        @MODULE[LRTFFailure*]:HAS[#engineID[]]
        {
                @engineID = all
        }
}

// No decay for single-use engines. Doesn't really matter, but makes for less confusing UI
@PART[*]:HAS[@MODULE[TestFlightReliability_EngineCycle],@MODULE[ModuleEngines*]:HAS[#allowShutdown[?alse]]]:AFTER[zTestFlight]
{
        @MODULE[TestFlightReliability_EngineCycle]
        {
                !idleDecayRate = DEL
        }
}

//Cleanup
@PART[*]:HAS[@LRTFCONF[Engine]]:FOR[zTestFlight]
{
     !LRTFCONF[Engine] {} 
}

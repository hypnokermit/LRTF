// To keep config clutter down, TF settings are abstracted into a LRTFCONF[Avionics] block.
// The syntax is as follows:
// LRTFCONF[Avionics] {
//     // required
//     name =                           // configuration name. MUST be unique to each part!
//     cycleReliabilityStart =          // probability of surviving an orbit at 0 DU
//     cycleReliabilityEnd =            // probability at max DU
//     startMTBF =                      //MTBF for new parts
//     duPerFlight =                    //du collected per flight
//     avionicsAxis = 					//true enables each failure mode
//     avionicsClamp = 
//     avionicsDeadZone = 
//     avionicsGlitch = 
//     avionicsInvert = 
//     avionicsPartial = 
//     avionicsThrustJam = 
//     avionicsTotal = 
//     avionicsReactionWheel =
//     avionicsBattery =
//
//     // optional
//     title =                          // part name to use in MFD. Defaults to full VAB name.
//     mannedMulti =                    //duFail and repair multiple for manned command parts
//     startFlightData =                // minimum DU a part may have. Default 0.
//     techTransfer =                   // other parts produce data for this one
//     reliabilityDataRateMultiplier =  // data collection efficiency (default 1.0)
//     explicitDataRate = True          // reliabilityDataRateMultiplier is data rate per second.
//     maxDeadtime =  1            //max time loss of control can happen before toggling back on
//     maxWorktime =  1           //max time working control can happen before toggling off
//     drainResource =            //drains all pump failer resources to 0
//
//     mainConfiguration =              // override for configurable command parts
//     reliabilityMidH =                // midpoint data value. 0.0 means 1000 DU, 1.0 means 6000 DU. Default 0.75 (4750 DU).
// }

// Handle TF interop
@PART[*]:HAS[@LRTFCONF[Avionics],@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
        !LRTFCONF[Avionics],* {} // something else is configuring TF, so don't do it.
}

// Preprocess
@PART[*]:HAS[@LRTFCONF[Avionics]]:FOR[zTestFlight]
{
        // Default values
        @LRTFCONF[Avionics]
        {
                alias = #$partName$
                displayName = #$../title$
                temp = #$../name$
                @temp ^= :_:-:
                mainConf = #kspPartName = $temp$:$alias$

                kinkH = 0.75

                dataMult = 1.0
                startDU = 0
                tech =  
                mannedDUMulti = 1
				glitchMaxDeadtime = 1
				glitchMaxWorktime = 1
        }

        // Let user override defaults
        @LRTFCONF[Avionics]:HAS[#title[*]]
        {
                @displayName = #$title$
        }
        @LRTFCONF[Avionics]:HAS[#mainConfiguration[*]]
        {
                // Assume no alias in mainConfiguration; otherwise overwrite below
                @mainConf = #$mainConfiguration$:$alias$
        }
        @LRTFCONF[Avionics]:HAS[#mainConfiguration[*:*]]
        {
                @mainConf = #$mainConfiguration$
                @alias = #$mainConfiguration[1,:]$
        }
        @LRTFCONF[Avionics]:HAS[#reliabilityMidH[*]]
        {
                @kinkH = #$reliabilityMidH$
        }
        @LRTFCONF[Avionics]:HAS[#reliabilityDataRateMultiplier[*]]
        {
                @dataMult *= #$reliabilityDataRateMultiplier$
        }
        @LRTFCONF[Avionics]:HAS[#startFlightData[*]]
        {
                @startDU = #$startFlightData$
        }
        @LRTFCONF[Avionics]:HAS[#techTransfer[*]]
        {
                @tech = #$techTransfer$
        }
        @LRTFCONF[Avionics]:HAS[~explicitDataRate[?rue]]
        {
                @dataMult *= #$duPerFlight$ // data collected per flight
                @dataMult /= #$startMTBF$
        }

		@LRLRTFCONF[Avionics]:HAS[#maxDeadtime[*]]
		{
			%glitchMaxDeadtime = #$maxDeadtime$
		}
		@LRLRTFCONF[Avionics]:HAS[#maxWorktime[*]]
		{
			%glitchMaxWorktime = #$maxWorktime$
		}
		@LRLRTFCONF[Avionics]:HAS[#mannedMulti[*]]
		{
			%mannedDUMulti = #$mannedMulti$
		}
		

        // Convert fail chance to fail rate
        @LRTFCONF[Avionics]
        {
                // should really be failChanceStart = -ln(cycleReliabilityStart)/startMTBF
                // but ModuleManager doesn't support natural logarithms
                // (1/cycleReliabilityStart-1)/(2*startMTBF) is an ok approximation
                failChanceStart = 1
                @failChanceStart /= #$cycleReliabilityStart$
                @failChanceStart -= 1
                @failChanceStart /= 2
                @failChanceStart /= #$startMTBF$
                failChanceEnd = 1
                @failChanceEnd /= #$cycleReliabilityEnd$
                @failChanceEnd -= 1
                @failChanceEnd /= 2
                @failChanceEnd /= #$startMTBF$
        }
}

//------------------------------------------------------------------
// Create the nodes.

@PART[*]:HAS[@LRTFCONF[Avionics]]:FOR[zTestFlight]
{
		@description = #$description$ <br><br><b><color=orange>Rated Operational Time ~$LRTFCONF[Avionics]/startMTBF$ seconds</color><br><br>

        MODULE
        {
                name = TestFlightCore
                title = #$../LRTFCONF[Avionics]/displayName$
                configuration = #$../LRTFCONF[Avionics]/mainConf$
                maxData = 10000

                startFlightData = #$../LRTFCONF[Avionics]/startDU$
                techTransfer = #$../LRTFCONF[Avionics]/tech$
                // Most part series have only 2-3 parts
                techTransferGenerationPenalty = 0.5

                // R&D parameters will be handled later
        }

        MODULE
        {
                name = LRTFDataRecorder_Avionics
                configuration = #$../LRTFCONF[Avionics]/alias$
                flightDataMultiplier = #$../LRTFCONF[Avionics]/dataMult$
        }

        MODULE
        {
                name = TestFlightReliability_TestFail
                configuration = #$../LRTFCONF[Avionics]/alias$
                reliabilityCurve
                {
                        // Create first key
                        key10 = 0
                        key11 = #$../../LRTFCONF[Avionics]/failChanceStart$

                        // Calculate kink time
                        key20 = #$../../LRTFCONF[Avionics]/kinkH$
                        @key20 *= 5000
                        @key20 += 1000

                        // Calculate kink value
                        key21 = #$../../LRTFCONF[Avionics]/failChanceEnd$
                        @key21 -= #$../../LRTFCONF[Avionics]/failChanceStart$
                        @key21 *= 0.75
                        @key21 += #$../../LRTFCONF[Avionics]/failChanceStart$

                        // Calculate kink tangent
                        key22 = #$../../LRTFCONF[Avionics]/failChanceEnd$
                        @key22 -= #$../../LRTFCONF[Avionics]/failChanceStart$
                        @key22 *= 0.0001
                        @key22 *= 0.5
                        // now average it with the linear tangent to the endpoint
                        key221 = #$../../LRTFCONF[Avionics]/failChanceEnd$
                        @key221 -= #$key21$
                        key222 = 10000
                        @key222 -= #$key20$
                        @key221 /= #$key222$
                        @key222 = 0.5
                        @key222 *= -1
                        @key222 += 1
                        @key221 *= #$key222$
                        @key22 += #$key221$

                        // Create end key
                        key30 = 10000
                        key31 = #$../../LRTFCONF[Avionics]/failChanceEnd$
                        key32 = 0 // flat intangent

                        // Create the keys
                        key = #$key10$ $key11$
                        key = #$key20$ $key21$ $key22$ $key22$
                        key = #$key30$ $key31$ $key32$ $key32$

                        // Clean up
                        !key10 = DEL
                        !key11 = DEL
                        !key20 = DEL
                        !key21 = DEL
                        !key22 = DEL
                        !key30 = DEL
                        !key31 = DEL
                        !key32 = DEL
                        !key221 = DEL
                        !key222 = DEL
                }
        }
}

@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsSAS[?rue]]]:FOR[zTestFlight]
{
		MODULE
        {
                name = LRTFFailure_AvionicsSAS
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = SAS Failure
                severity = minor
                weight = 8
                failureType = software
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsAxis[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsAxis
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Loss Of Axial Control
                severity = minor
                weight = 8
                failureType = software
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsClamp[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsClamp
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Avionics Clammped
                severity = minor
                weight = 8
                failureType = software
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsDeadZone[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsDeadzone
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Avionics Dead Zone
                severity = minor
                weight = 16
                failureType = software
        }
}

@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsGlitch[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsGlitch
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Avionics Glitch
                severity = minor
                weight = 16
                failureType = software
                maxDeadtime = #$../LRTFCONF[Avionics]/glitchMaxDeadtime$
                maxWorkTime = #$../LRTFCONF[Avionics]/glitchMaxWorktime$
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsInvert[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsInvert
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Inverted Avionics
                severity = minor
                weight = 16
                failureType = hardware
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsPartial[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsPartial
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Partial Avionics Control
                severity = minor
                weight = 16
                failureType = hardware
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsThrustJam[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsThrustJam
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Jammed Thruster
                severity = minor
                weight = 16
                failureType = hardware
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsTotal[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsTotal
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Total Loss Of Avionics
                severity = major
                includeAxisInPAW = false
                weight = 2
                failureType = hardware
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsSAS[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_AvionicsSAS
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = SAS Failure
                severity = Major
                weight = 2
                failureType = software
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsReactionWheel[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_ReactionBroken
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Broken Reaction Wheel
                severity = minor
                weight = 16
                failureType = hardware
        }
        MODULE
        {
                name = LRTFFailure_ReactionTorque
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                @duFail *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                duRepair = 250
                @duRepair *= #$../LRTFCONF[Avionics]/mannedDUMulti$
                failureTitle = Torque Alignment Errors
                severity = minor
                weight = 32
                failureType = software
        }
}
@PART[*]:HAS[@LRTFCONF[Avionics]:HAS[#avionicsResources[?rue]]]:FOR[zTestFlight]
{
        MODULE
        {
                name = LRTFFailure_ResourceLeak
                configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Resource Leak
                severity = minor
                weight = 16
                initialAmount = 0
                perSecondAmount = 0.05
                resourceToLeak = Any
                includeResourceInPAW = false
                resourceBlacklist = Ablator,SolidFuel
                RESOURCETITLES
                {
                	ElectricCharge = Short Circuit
                	MonoPropellant = Monopropellant Leak
                }
                failureType = hardware
        }
		MODULE
        {
        		name = LRTFFailure_ResourcePump
				configuration = #$../LRTFCONF[Avionics]/alias$
                duFail = 100
                duRepair = 250
                failureTitle = Resource Failure
				weight = 2
				severity = major
				resourceName = Any
				failureType = hardware
				drainResource = false
				includeResourceInPAW = false
				RESOURCETITLES
                {
                	ElectricCharge = Battery Failure
                	MonoPropellant = Presssurization Failure
                }
        }
}

//Cleanup
@PART[*]:HAS[@LRTFCONF[Avionics]]:AFTER[zTestFlight]
{
	-LRTFCONF[Avionics] {}
}
// To keep config clutter down, TF settings are abstracted into a LRTFCONF[Tank] block.
// The syntax is as follows:
// LRTFCONF[Tank] {
// resources =				//records if only specific resources are present.	
							//comma separated list such as = LiquidFuel,Oxidizer
							//ALL for every resource.
//  blacklist =				//comma seperated list such as = LeadBallast
//	min = 0.1				//minimum resource needed to record
//	mainConfiguration =		// override for configurable heat shields
//	reliabilityMidH =		// midpoint data value. 0.0 means 1000 DU, 1.0 means 6000 DU. Default 0.75 (4750 DU).
//	resourceToLeak = ANY	//list specific resource or ALL
// }

@PART[*]:HAS[@LRTFCONF[Tank],@MODULE[TestFlightInterop]]:FOR[zTestFlight]
{
	!LRTFCONF[Tank] {} // something else is configuring TF, so don't do it.
}

// Preprocess
@PART[*]:HAS[@LRTFCONF[Tank]]:FOR[zTestFlight]
{
	@LRTFCONF[Tank]:HAS[~min]
	{
		min = 0.1
	}
	@LRTFCONF[Tank]:HAS[~resources]
	{
		resources = Any
	}
	@LRTFCONF[Tank]:HAS[~blacklist]
	{
		blacklist =
	}
	@LRTFCONF[Tank]:HAS[~initialAmount]
	{
		initialAmount = 10
	}	
	@LRTFCONF[Tank]:HAS[~perSecondAmount]
	{
		perSecondAmount = 0.1
	} 
	@LRTFCONF[Tank]:HAS[~calculatePerTick]
	{
		calculatePerTick = false
	}	
	@LRTFCONF[Tank]:HAS[~explicitDataRate[?rue]]
	{
		@dataMult *= #$duPerFlight$ 
		@dataMult /= #$startMTBF$ 
	}

}

//------------------------------------------------------------------
// Create the nodes.

@PART[*]:HAS[@LRTFCONF[Tank]]:FOR[zTestFlight]
{
	@MODULE[LRTFDataRecorder]
	{
		%name = LRTFDataRecorder_Tanks
		emptyThreshold = #$../LRTFCONF[Tank]/min$
		resourceNames = #$../LRTFCONF[Tank]/resources$
	}	
}

@PART[*]:HAS[@LRTFCONF[Tank]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_ResourceLeak
		configuration = #$../LRTFCONF[Tank]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Resource Leak
		severity = minor
		weight = 32
		initialAmount = #$../LRTFCONF[Tank]/initialAmount$
		perSecondAmount = #$../LRTFCONF[Tank]/perSecondAmount$
		failureType = hardware
		resourceBlacklist = #$../LRTFCONF[Tank]/blacklist$
		RESOURCETITLES
		{
			ElectricCharge = Short Circuit
		}
	}
	MODULE
	{
		name = LRTFFailure_ResourcePump
		configuration = #$../LRTFCONF[Tank]/alias$
		duFail = 100
		duRepair = 250
		failureTitle = Pressurization Failure
		weight = 8
		severity = major
		failureType = hardware
		resourceBlacklist = #$../LRTFCONF[Tank]/blacklist$
		RESOURCETITLES
		{
			ElectricCharge = Battery Failure
		}
	}
}

@PART[*]:HAS[@LRTFCONF[Tank]:HAS[#ignitionFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = LRTFFailure_IgnitionFail
		configuration = #$../LRTFCONF[Tank]/alias$
		duFail = 300
		failureTitle = Failed to ignite
		severity = major
		failureType = mechanical
	
		baseIgnitionChance
		{
			// Create first key
			key10 = 0
			key11 = #$../../LRTFCONF[Tank]/ignitionReliabilityStart$

			// Calculate kink time
			key20 = #$../../LRTFCONF[Tank]/kinkH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../../LRTFCONF[Tank]/ignitionReliabilityEnd$
			@key21 -= #$../../LRTFCONF[Tank]/ignitionReliabilityStart$
			@key21 *= #$../../LRTFCONF[Tank]/kinkV$
			@key21 += #$../../LRTFCONF[Tank]/ignitionReliabilityStart$

			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../../LRTFCONF[Tank]/ignitionReliabilityEnd$
			@key22 -= #$../../LRTFCONF[Tank]/ignitionReliabilityStart$
			@key22 *= 0.0001
			@key22 *= #$../../LRTFCONF[Tank]/kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../../LRTFCONF[Tank]/ignitionReliabilityEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../../LRTFCONF[Tank]/kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = 10000
			key31 = #$../../LRTFCONF[Tank]/ignitionReliabilityEnd$
			key32 = 0 // flat intangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key221 = DEL
			!key222 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
	
		pressureCurve
		{
			key = 0 1 0 0
			key = 5000 1 0 0
			key = 15000 0.85 -2.25E-05 -2.25E-05
			key = 30000 0.4
			key = 50000 0.15 0 0
		}
	}
}

//Cleanup
@PART[*]:HAS[@LRTFCONF[Tank]]:AFTER[zTestFlight]
{
	-LRTFCONF[Tank] {}
}